terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "=2.73.0"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "=2.5.0"
    }
    
  }

}

# Configure the Microsoft Azure Provider
provider "azurerm" {

  subscription_id = "xxx"

  features {}
}

CALL AKS MODULE
 module "myaks" {
   source         = "./modules/k8s"
   aks-name       = "aks01"
   aks-dns        = "aks01-dns"
   aks-version    = "1.20.9"
   aks-subnet-id  = module.vnet01.vnet_subnets.1

 }


CALL VNET MODULE
 module "vnet00" {
  source         = "./modules/network/vnet"
  vnet-name      = "vNet-00-hub"
  vnet-range     = ["192.168.16.0/24","172.16.0.0/22"]
  subnets-name   = ["subnet01","aks-subnet"]
  subnets-range  = ["192.168.16.0/28","172.16.0.0/24"]
  vnet-location  = "southeastasia"
}

CALL VNET Peering MODULE
module "peer-vnet01-02" {
  source                  = "./modules/network/vnet-peering"
  peer-name               = "${module.vnet00.vnet-name}-PeerTo-${module.vnet01.vnet-name} "
  peer-rg                 = module.vnet00.vnet-rg
  source-vnet-name        = module.vnet00.vnet-name
  target-vnet-id          = module.vnet01.vnet-id
  use-remote-gw           = "False"
 
}

CALL Log Analytic MODULE 
module "law-01" {
  source = "./modules/diagnostic/log-analytics"
}

CALL Application Gateway MODULE

 module "AppGW01" {
   source     = "./modules/network/appgw"
   agsnetname = module.vnet00.vnet_subnets-name.2
   agsnetid   = module.vnet00.vnet_subnets.2

 }

 module "AGIC01" {
  source             = "./modules/network/agic"
  agrg               = module.myaks.aks-rg.name
  loc                = module.myaks.aks-rg.location
  agsnetname         = module.vnet00.vnet_subnets-name.2
  agnetid            = module.vnet00.vnet-id
  agsnetid           = module.vnet00.vnet_subnets.2
  akssnet_id         = module.vnet00.vnet_subnets.1
  spn_id             = "xxxx"
  subid              = "xxxx"
  host               = module.myaks.host
  client_certificate = base64decode(module.myaks.client_certificate)
  client_key         = base64decode(module.myaks.client_key)
  cluster_ca_certificate = base64decode(module.myaks.cluster_ca_certificate)
  aks-rg                 = module.myaks.aks-rg.id
}

#call sample app for agic 
module "httpd" {
  source = "./modules/k8s/testapp"
  host                   = module.myaks.host
  client_certificate     = base64decode(module.myaks.client_certificate)
  client_key             = base64decode(module.myaks.client_key)
  cluster_ca_certificate = base64decode(module.myaks.cluster_ca_certificate)

}